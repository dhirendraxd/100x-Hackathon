import { Timestamp } from 'firebase/firestore';

/**
 * Difficulty levels for government forms
 */
export type FormDifficulty = 'easy' | 'medium' | 'hard';

/**
 * Government departments/ministries
 */
export type GovernmentDepartment = 
  | 'home-affairs'
  | 'foreign-affairs'
  | 'finance'
  | 'education'
  | 'health'
  | 'agriculture'
  | 'industry'
  | 'labor'
  | 'transportation'
  | 'other';

/**
 * Document types associated with forms
 */
export type DocumentType = 
  | 'passport'
  | 'citizenship'
  | 'pan-card'
  | 'national-id'
  | 'driving-license'
  | 'voter-id'
  | 'business-registration'
  | 'tax-return'
  | 'land-registration'
  | 'other';

/**
 * Field types in government forms
 */
export type FieldType = 
  | 'text'
  | 'number'
  | 'email'
  | 'phone'
  | 'date'
  | 'address'
  | 'select'
  | 'radio'
  | 'checkbox'
  | 'file-upload'
  | 'signature';

/**
 * Validation rules for form fields
 */
export interface ValidationRule {
  type: 'required' | 'pattern' | 'min-length' | 'max-length' | 'min' | 'max' | 'custom';
  value?: string | number;
  message: string;
  customValidator?: string; // Name of custom validator function
}

/**
 * Original form field structure from scraped document
 */
export interface OriginalFormField {
  id: string;
  label: string; // Original label from form
  labelNepali?: string; // Nepali translation if available
  type: FieldType;
  section: string; // Section number/name in original form
  position: {
    page: number;
    x: number;
    y: number;
    width: number;
    height: number;
  };
  required: boolean;
  placeholder?: string;
  options?: string[]; // For select/radio/checkbox fields
  validation?: ValidationRule[];
  helpText?: string; // Original help text from form
  isComplex?: boolean; // Flag for AI-identified complex fields
}

/**
 * Simplified form field for user-friendly version
 */
export interface SimplifiedFormField {
  id: string;
  label: string; // Simplified, plain-language label
  labelNepali?: string;
  type: FieldType;
  description: string; // Clear explanation of what to enter
  descriptionNepali?: string;
  required: boolean;
  placeholder: string;
  options?: Array<{
    value: string;
    label: string;
    labelNepali?: string;
  }>;
  validation?: ValidationRule[];
  hint?: string; // Additional helpful hint
  hintNepali?: string;
  example?: string; // Example value
  mappingTo: string; // ID of original form field
}

/**
 * Field mapping between simplified and original form
 */
export interface FieldMapping {
  simplifiedFieldId: string;
  originalFieldId: string;
  originalSection: string;
  originalFieldName: string;
  instructions: string; // Step-by-step instructions for copying data
  instructionsNepali?: string;
}

/**
 * Annotation/tooltip for complex form sections
 */
export interface FormAnnotation {
  id: string;
  sectionId: string;
  fieldId?: string; // Optional, if annotation is for specific field
  type: 'tooltip' | 'warning' | 'info' | 'example';
  title: string;
  titleNepali?: string;
  content: string; // Detailed explanation
  contentNepali?: string;
  position?: {
    x: number;
    y: number;
  };
  highlightArea?: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
  aiGenerated: boolean; // Whether annotation was generated by AI
  verified: boolean; // Whether annotation was human-verified
}

/**
 * Required supporting documents for a form
 */
export interface RequiredDocument {
  id: string;
  name: string;
  nameNepali?: string;
  type: DocumentType;
  description: string;
  descriptionNepali?: string;
  required: boolean;
  acceptedFormats: string[]; // e.g., ['pdf', 'jpg', 'png']
  maxSizeBytes: number;
  validationRules?: string[]; // Links to document validation requirements
}

/**
 * Form section grouping related fields
 */
export interface FormSection {
  id: string;
  title: string;
  titleNepali?: string;
  description?: string;
  descriptionNepali?: string;
  order: number;
  fields: string[]; // Array of field IDs
  estimatedTimeMinutes?: number;
}

/**
 * Complete government form metadata and structure
 */
export interface GovernmentForm {
  id?: string; // Firestore document ID
  
  // Metadata
  name: string;
  nameNepali?: string;
  department: GovernmentDepartment;
  documentType: DocumentType;
  version: string; // Form version (e.g., "2024.1")
  difficulty: FormDifficulty;
  
  // URLs and references
  officialUrl?: string; // Link to official form on government website
  pdfUrl?: string; // URL to PDF version
  imageUrls?: string[]; // URLs to form images (for multi-page forms)
  
  // Form structure
  originalFields: OriginalFormField[];
  simplifiedFields?: SimplifiedFormField[];
  sections: FormSection[];
  fieldMappings?: FieldMapping[];
  
  // Annotations and help
  annotations: FormAnnotation[];
  requiredDocuments: RequiredDocument[];
  
  // AI analysis
  aiAnalysis?: {
    complexityScore: number; // 0-100
    estimatedCompletionMinutes: number;
    legalTermsCount: number;
    commonMistakes?: string[];
    tips?: string[];
  };
  
  // Stats and tracking
  statistics?: {
    totalSubmissions: number;
    averageCompletionTime: number;
    successRate: number; // Percentage of successfully submitted forms
    popularityScore: number;
  };
  
  // Community publishing (for user-scraped forms)
  published?: boolean; // Visible to everyone in the library when true
  publishedByUserId?: string;
  publishedByName?: string;
  publishedByEmail?: string;
  publishedAt?: Timestamp;
  
  // Timestamps
  createdAt: Timestamp;
  updatedAt: Timestamp;
  scrapedAt?: Timestamp;
  lastVerifiedAt?: Timestamp;
  
  // Flags
  isActive: boolean;
  isVerified: boolean; // Whether form has been human-verified
  needsUpdate: boolean; // Flag for outdated forms
  
  // Search and categorization
  tags: string[];
  keywords: string[];
  relatedForms?: string[]; // IDs of related forms
}

/**
 * User's saved form draft
 */
export interface UserFormDraft {
  id?: string;
  userId: string;
  formId: string; // Reference to GovernmentForm
  formVersion: string;
  
  // Form data
  data: Record<string, unknown>; // Field ID -> value
  completedFields: string[]; // Array of completed field IDs
  completionPercentage: number;
  
  // Versioning for auto-save
  versions?: Array<{
    timestamp: Date | { toDate: () => Date }; // Support both Date and Firestore Timestamp
    data: Record<string, unknown>;
  }>;
  
  // Status
  status: 'draft' | 'in-review' | 'completed' | 'submitted';
  currentSection?: string; // Last section user was working on
  
  // Timestamps (support both Date and Firestore Timestamp for flexibility)
  createdAt: Date | { toDate: () => Date };
  lastModifiedAt: Date | { toDate: () => Date };
  submittedAt?: Date | { toDate: () => Date };
  
  // Collaboration
  sharedWith?: Array<{
    userId: string;
    email: string;
    permission: 'view' | 'edit' | 'approve';
    addedAt: Timestamp;
  }>;
  
  comments?: Array<{
    id: string;
    userId: string;
    fieldId: string;
    content: string;
    createdAt: Timestamp;
  }>;
}

/**
 * Form template for quick start
 */
export interface FormTemplate {
  id?: string;
  name: string;
  nameNepali?: string;
  description: string;
  descriptionNepali?: string;
  formId: string; // Reference to GovernmentForm
  
  // Pre-filled data
  prefilledData: Record<string, unknown>;
  
  // Template metadata
  category: string;
  isOfficial: boolean; // Whether it's an official template
  createdBy?: string; // User ID if user-created template
  
  // Stats
  usageCount: number;
  
  // Timestamps
  createdAt: Timestamp;
  updatedAt: Timestamp;
}

/**
 * Search index for forms
 */
export interface FormSearchIndex {
  formId: string;
  name: string;
  nameNepali?: string;
  department: GovernmentDepartment;
  documentType: DocumentType;
  keywords: string[];
  tags: string[];
  difficulty: FormDifficulty;
  popularityScore: number;
}
