import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Navigation from "@/components/Navigation";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { useAuthContext } from "@/contexts/AuthContext";
import { toast } from "sonner";
import {
  FileText,
  Clock,
  CheckCircle2,
  AlertCircle,
  TrendingUp,
  Folders,
  Plus,
  Eye,
  LogOut,
} from "lucide-react";

interface FormDraft {
  id: string;
  formId: string;
  formName: string;
  progress: number;
  lastModified: Date;
  fieldsCompleted: number;
  totalFields: number;
  requiredDocsCollected: number;
  totalRequiredDocs: number;
}

const FormProgressDashboard = () => {
  const navigate = useNavigate();
  const { user, signOut } = useAuthContext();
  const [drafts, setDrafts] = useState<FormDraft[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (!user) {
      navigate("/login");
      return;
    }
    loadDrafts();
  }, [user, navigate]);

  const handleSignOut = async () => {
    const { error } = await signOut();
    if (error) {
      toast.error(error);
    } else {
      toast.success('Signed out successfully');
      navigate('/');
    }
  };

  const loadDrafts = () => {
    // Load drafts from localStorage (in production, this would come from Firestore)
    const allDrafts: FormDraft[] = [];
    
    // Scan localStorage for draft keys
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith("form_draft_")) {
        try {
          const formId = key.replace("form_draft_", "");
          const draftData = localStorage.getItem(key);
          if (draftData) {
            const parsedData = JSON.parse(draftData);
            const fieldsCompleted = Object.values(parsedData).filter(
              (v) => v !== "" && v !== null && v !== undefined
            ).length;
            
            allDrafts.push({
              id: key,
              formId,
              formName: `Form ${formId.substring(0, 8)}...`,
              progress: Math.round((fieldsCompleted / (Object.keys(parsedData).length || 1)) * 100),
              lastModified: new Date(), // Would come from metadata
              fieldsCompleted,
              totalFields: Object.keys(parsedData).length,
              requiredDocsCollected: 0, // Would track this separately
              totalRequiredDocs: 0,
            });
          }
        } catch (error) {
          console.error("Error parsing draft:", error);
        }
      }
    }

    setDrafts(allDrafts);
    setIsLoading(false);
  };

  const getProgressColor = (progress: number) => {
    if (progress >= 80) return "text-green-400";
    if (progress >= 40) return "text-yellow-400";
    return "text-red-400";
  };

  const getProgressBgColor = (progress: number) => {
    if (progress >= 80) return "bg-green-400";
    if (progress >= 40) return "bg-yellow-400";
    return "bg-red-400";
  };

  return (
    <div className="min-h-screen bg-gradient-dark">
      <Navigation />

      <div className="container mx-auto px-4 py-8 pt-28">
        {/* Header with Sign Out */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">
              My Progress
            </h1>
            <p className="text-gray-400">
              Welcome back, {user?.email?.split('@')[0]}! Track your form drafts and completion status.
            </p>
          </div>
          <Button 
            variant="outline" 
            onClick={handleSignOut}
            className="flex items-center gap-2"
          >
            <LogOut className="w-4 h-4" />
            Sign Out
          </Button>
        </div>

        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <Card className="bg-card/50 backdrop-blur border-white/10">
            <CardContent className="p-4 flex items-center gap-3">
              <div className="p-2 rounded-full bg-blue-500/20">
                <Folders className="h-5 w-5 text-blue-400" />
              </div>
              <div>
                <p className="text-2xl font-bold text-white">{drafts.length}</p>
                <p className="text-sm text-gray-400">Active Drafts</p>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-card/50 backdrop-blur border-white/10">
            <CardContent className="p-4 flex items-center gap-3">
              <div className="p-2 rounded-full bg-green-500/20">
                <CheckCircle2 className="h-5 w-5 text-green-400" />
              </div>
              <div>
                <p className="text-2xl font-bold text-white">
                  {drafts.filter((d) => d.progress >= 80).length}
                </p>
                <p className="text-sm text-gray-400">Nearly Complete</p>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-card/50 backdrop-blur border-white/10">
            <CardContent className="p-4 flex items-center gap-3">
              <div className="p-2 rounded-full bg-yellow-500/20">
                <Clock className="h-5 w-5 text-yellow-400" />
              </div>
              <div>
                <p className="text-2xl font-bold text-white">
                  {drafts.filter((d) => d.progress > 0 && d.progress < 80).length}
                </p>
                <p className="text-sm text-gray-400">In Progress</p>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-card/50 backdrop-blur border-white/10">
            <CardContent className="p-4 flex items-center gap-3">
              <div className="p-2 rounded-full bg-red-500/20">
                <AlertCircle className="h-5 w-5 text-red-400" />
              </div>
              <div>
                <p className="text-2xl font-bold text-white">
                  {drafts.filter((d) => d.progress === 0).length}
                </p>
                <p className="text-sm text-gray-400">Not Started</p>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Drafts List */}
        <div className="grid grid-cols-1 gap-4">
          {isLoading ? (
            <Card className="bg-card/50 backdrop-blur border-white/10">
              <CardContent className="p-8 text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
                <p className="text-gray-400">Loading your drafts...</p>
              </CardContent>
            </Card>
          ) : drafts.length === 0 ? (
            <Card className="bg-card/50 backdrop-blur border-white/10">
              <CardContent className="p-8 text-center">
                <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-white mb-2">No drafts yet</h3>
                <p className="text-gray-400 mb-4">
                  Start filling out a form to see your progress here
                </p>
                <Button onClick={() => navigate("/form-library")} className="gap-2">
                  <Plus className="h-4 w-4" />
                  Browse Forms
                </Button>
              </CardContent>
            </Card>
          ) : (
            drafts.map((draft) => (
              <Card
                key={draft.id}
                className="bg-card/50 backdrop-blur border-white/10 hover:border-primary/50 transition-all cursor-pointer"
                onClick={() => navigate(`/form-builder/${draft.formId}`)}
              >
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-white flex items-center gap-2">
                        <FileText className="h-5 w-5 text-primary" />
                        {draft.formName}
                      </CardTitle>
                      <CardDescription className="mt-1">
                        Last modified: {draft.lastModified.toLocaleDateString()}
                      </CardDescription>
                    </div>
                    <Badge
                      variant={draft.progress >= 80 ? "default" : "secondary"}
                      className={draft.progress >= 80 ? "bg-green-500" : ""}
                    >
                      {draft.progress}% Complete
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Progress Bar */}
                  <div>
                    <div className="flex items-center justify-between mb-2 text-sm">
                      <span className="text-gray-400">Overall Progress</span>
                      <span className={`font-semibold ${getProgressColor(draft.progress)}`}>
                        {draft.progress}%
                      </span>
                    </div>
                    <Progress value={draft.progress} className="h-2" />
                  </div>

                  <Separator className="bg-white/10" />

                  {/* Details Grid */}
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <div>
                      <p className="text-xs text-gray-500 mb-1">Fields Completed</p>
                      <p className="text-sm font-semibold text-white">
                        {draft.fieldsCompleted} / {draft.totalFields}
                      </p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 mb-1">Required Fields</p>
                      <p className="text-sm font-semibold text-white">
                        {Math.round(draft.totalFields * 0.6)} / {draft.totalFields}
                      </p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 mb-1">Next Steps</p>
                      <p className="text-sm font-semibold text-primary">
                        {draft.progress >= 80
                          ? "Review & Submit"
                          : draft.progress > 0
                          ? "Continue Filling"
                          : "Start Form"}
                      </p>
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2 pt-2">
                    <Button
                      onClick={(e) => {
                        e.stopPropagation();
                        navigate(`/form-builder/${draft.formId}`);
                      }}
                      className="flex-1"
                      size="sm"
                    >
                      Continue Editing
                    </Button>
                    <Button
                      onClick={(e) => {
                        e.stopPropagation();
                        navigate(`/form-viewer/${draft.formId}`);
                      }}
                      variant="outline"
                      size="sm"
                      className="gap-2"
                    >
                      <Eye className="h-4 w-4" />
                      View Details
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))
          )}
        </div>

        {/* Help Section */}
        {drafts.length > 0 && (
          <Card className="bg-card/50 backdrop-blur border-white/10 mt-8">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-primary" />
                Tips for Completing Forms
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-sm text-gray-400">
              <p>• Save your progress frequently - it's auto-saved, but manual saves help</p>
              <p>• Complete all required fields before submitting</p>
              <p>• Use the cheat sheet for helpful tips and common mistakes</p>
              <p>• Keep all required documents ready before starting</p>
            </CardContent>
          </Card>
        )}
      </div>

      {/* <Footer /> --- IGNORE --- */}``
    </div>
  );
};

export default FormProgressDashboard;
